// Code generated by capnpc-go. DO NOT EDIT.

package foo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Product struct{ capnp.Struct }

// Product_TypeID is the unique identifier for the type Product.
const Product_TypeID = 0xba07db930248f917

func NewProduct(s *capnp.Segment) (Product, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Product{st}, err
}

func NewRootProduct(s *capnp.Segment) (Product, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Product{st}, err
}

func ReadRootProduct(msg *capnp.Message) (Product, error) {
	root, err := msg.Root()
	return Product{root.Struct()}, err
}

func (s Product) String() string {
	str, _ := text.Marshal(0xba07db930248f917, s.Struct)
	return str
}

func (s Product) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Product) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Product) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Product) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Product) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Product) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Product) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Product) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Product) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Product) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Product) Price() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Product) SetPrice(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Product) Colors() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Product) HasColors() bool {
	return s.Struct.HasPtr(2)
}

func (s Product) SetColors(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewColors sets the colors field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Product) NewColors(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Product_List is a list of Product.
type Product_List = capnp.StructList[Product]

// NewProduct creates a new list of Product.
func NewProduct_List(s *capnp.Segment, sz int32) (Product_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[Product]{l}, err
}

// Product_Future is a wrapper for a Product promised by a client call.
type Product_Future struct{ *capnp.Future }

func (p Product_Future) Struct() (Product, error) {
	s, err := p.Future.Struct()
	return Product{s}, err
}

const schema_b7eeedc03c4a0186 = "x\xda4\xca1J3A\x18\x06\xe0\xf7\xfdf\xf2/" +
	"\x81\xfc\xd1\x91\x01\xc1&\xbd\xa0\x12\xcb h)V\xf9" +
	"\x8e\x10gWX\xd0\x9de\xb3\x01\x0b-\x84()\x14" +
	"\x94x\x08o \xd8hci\xa1\xadg\xd0\xdejE" +
	"\xc1\xf6\xe1Y\x9c\xef\xd8\xfe\xffGB\xd4\xb7\xfe5\xcb" +
	"_\xbb2\x7fO\x1e\xa0K\x94\xe6\x82{[O\x1f\x9f" +
	"\xf7h\x99\x04p\xcfo\xee5\x01\xfa/=b\xad9" +
	"\x88q\xa3\xacb*\x93P\xaf\x87QY\x94\x83a\x15" +
	"\xd3I`=$\xd5\x1b\x0bX\x02\xeet\x05\xd0cC" +
	"\x9d\x0aI\xcf\x1f;[\x05\xf4\xc4PgB'\xf4\x14" +
	"\xc0\x9d\xef\x03:5\xd4k\xa13\xe2i\x00w\xb5\x09" +
	"\xe8\xccPo\x85\xce\x8a\xa7\x05\xdc\xcd\x00\xd0KC\xbd" +
	"\x13\x9a<e\x1b\xc26\xb8P\x8c\x8e2v \xec\x80" +
	"M\x9a\x8dC\x95\x975\x92<\x16\x7f\xda+\xab<d" +
	"\xb4\x10Zp;\xc4\xc3X\x8d\xd9\x05\x87\x86\xbf\xa7\x0b" +
	"~\x07\x00\x00\xff\xff\x8c[7\x8b"

func init() {
	schemas.Register(schema_b7eeedc03c4a0186,
		0xba07db930248f917)
}
